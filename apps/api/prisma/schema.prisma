// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  passwordHash String
  passkey     String   @unique
  role        String   @default("USER")
  uploaded    BigInt  @default(0)
  downloaded  BigInt  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  torrents    Torrent[]
  snatches    Snatch[]
  invites     Invite[] @relation("Inviter")
  invitedBy   Invite? @relation("Invited")

  @@map("users")
}

model Torrent {
  id           String   @id @default(cuid())
  infoHashV1   String   @unique
  infoHashV2   String?
  name         String
  size         BigInt
  isPrivate    Boolean  @default(true)
  isFreeleech  Boolean  @default(false)
  isVip        Boolean  @default(false)
  is4k         Boolean  @default(false)
  tags         String
  uploaderId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader     User     @relation(fields: [uploaderId], references: [id])
  snatches     Snatch[]

  @@map("torrents")
}

model Snatch {
  id              String   @id @default(cuid())
  userId          String
  torrentId       String
  uploaded        BigInt  @default(0)
  downloaded      BigInt  @default(0)
  completed       Boolean  @default(false)
  seedtimeSeconds Int     @default(0)
  lastAnnounceAt  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  torrent         Torrent  @relation(fields: [torrentId], references: [id])

  @@unique([userId, torrentId])
  @@map("snatches")
}

model Invite {
  id        String    @id @default(cuid())
  code      String    @unique
  inviterId String
  usedBy    String?   @unique
  usedAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  // Relations
  inviter   User      @relation("Inviter", fields: [inviterId], references: [id])
  invited   User?     @relation("Invited", fields: [usedBy], references: [id])

  @@map("invites")
}


